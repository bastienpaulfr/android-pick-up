plugins {
    id "fr.coppernic.versioning" version "3.1.2"
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

apply from: rootProject.file('gradle/ktlint.gradle')
apply from: rootProject.file('gradle/jacoco.gradle')

repositories {
    google()
    //noinspection JcenterRepositoryObsolete
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "fr.bipi.sample.pickup"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode versioning.info.versionCode
        versionName versioning.info.display

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        multiDexEnabled true

        useLibrary 'android.test.runner'
        useLibrary 'android.test.base'
        useLibrary 'android.test.mock'
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug.assets.srcDirs += files("$projectDir/schemas".toString())

        androidTest.java.srcDirs += "src/test-common/java"
        androidTest.res.srcDirs += "src/test-common/res"

        test.java.srcDirs += "src/test-common/java"
        test.res.srcDirs += "src/test-common/res"
    }

    // Sometimes we are including libs that contains packages that are not in Android framework
    lintOptions {
        warning 'InvalidPackage'
    }

    // Needs this for Robolectric 4+
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    // Used for including libs compiled with kotlin
    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
        exclude 'META-INF/lib_release.kotlin_module'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

gradle.taskGraph.useFilter { task ->
    !(task.name.startsWith("test") && task.name.contains("Release"))
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.SKIPPED
        //TestLogEvent.STANDARD_OUT,
        //TestLogEvent.STANDARD_ERROR
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'


    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "com.google.android.material:material:1.5.0"
    implementation "androidx.vectordrawable:vectordrawable:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.takisoft.preferencex:preferencex:1.1.0'

    // Lifecycle
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.0"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.0"

    // Ui
    implementation 'com.github.Coppernic.AndroidSplashScreen:splash:0.4.1'

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'com.github.bastienpaulfr:Treessence:1.0.5'
    implementation 'com.arcao:slf4j-timber:3.1'

    // Koin
    implementation 'io.insert-koin:koin-android:3.1.2'
    implementation 'io.insert-koin:koin-androidx-workmanager:3.1.2'

    // Debug
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    debugImplementation "androidx.fragment:fragment-testing:1.4.1"

    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.4.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'org.amshove.kluent:kluent:1.65'

    testImplementation 'io.insert-koin:koin-test:3.1.2'
    testImplementation "io.insert-koin:koin-test-junit4:3.1.2"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2"
    testImplementation 'com.jraska.livedata:testing-ktx:1.2.0'

    // Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:1.1.1"

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'io.insert-koin:koin-test:3.1.2'
    androidTestImplementation "androidx.test:core:1.4.0"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'androidx.test' && requested.name == 'core') {
            details.useVersion '1.4.0'
        }
    }
    //println "$name -> $resolutionStrategy"
    resolutionStrategy.dependencySubstitution {
        substitute module("fr.coppernic.lib.android-utils:core:0.0.12") with module('com.github.coppernic.AndroidUtils:core:0.1.2')
        substitute module("fr.coppernic.lib.android-utils:rx:0.0.10") with module('com.github.coppernic.AndroidUtils:rx:0.1.2')
        substitute module("fr.bipi.treessence:treessence:0.3.0") with module('com.github.bastienpaulfr:Treessence:1.0.5')
    }
}

apply from: rootProject.file('gradle/sign.gradle')
apply from: rootProject.file('gradle/publish-app.gradle')
